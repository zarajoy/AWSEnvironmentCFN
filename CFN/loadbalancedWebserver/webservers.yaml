Description: Creates a load balanced cluster of simple apache webservers. PreReqs = s3 bucket with index.html loaded. see CFN/loadbalancedWebserver/README.md for instructions.
Parameters:
  Project:
    Description: Give the project a name
    Type: String
    Default: ZaraJoy
  Environment:
    Description: What type of Environment is this?
    Type: String
    AllowedValues:
      - Dev
      - Test
      - Production
      - QA
    Default: Dev
  VPCCIDR:
    Description: VPC CIDR Range
    Type: String
    Default: 10.0.0.0/16
  InstanceType:
    Description: WebServer EC2 instance type.
    Type: String
    Default: t3.micro
  BucketName:
    Description: BucketName
    Type: String
    Default: zarajoy-s3-4fd4f850
  ObjectPrefix1:
    Description: location of index.html in bucket. if at root just /
    Type: String
    Default: /web1/
  ObjectPrefix2:
    Description: location of index.html in bucket. if at root just /
    Type: String
    Default: /web2/
  LatestAmiId:
    Description: AMI for EC2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 180.150.38.5/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tags
        Parameters:
          - Project
          - Environment

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - VPC
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - IGW
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - RouteTablePublic
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  RouteTablePublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublic

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - RouteTablePrivate
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  SubnetApplicationA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - subnet-application-A
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  SubnetApplicationB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 4
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - subnet-application-B
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      CidrBlock: !Select
        - 6
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - subnet-public-A
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      CidrBlock: !Select
        - 7
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - subnet-public-B
        - Key: Environment
          Value: !Ref Environment
        - Key: CreatedBy
          Value: CFN

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - NATGW
        - Key: Environment
          Value: !Ref Environment

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  RouteTablePrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  RouteTableAssociationAppA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetApplicationA
      RouteTableId: !Ref RouteTablePrivate

  RouteTableAssociationAppB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref SubnetApplicationB
      RouteTableId: !Ref RouteTablePrivate

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: KeyPair

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web access to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH Access port 22.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
  web1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetApplicationA
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          aws s3 cp s3://${BucketName}${ObjectPrefix1}index.html /var/www/html/
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - EC21
        - Key: Environment
          Value: !Ref Environment
  web2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetApplicationB
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          aws s3 cp s3://${BucketName}${ObjectPrefix2}index.html /var/www/html/
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref Project
              - EC22
        - Key: Environment
          Value: !Ref Environment

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole
      InstanceProfileName: ec2-access-s3

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ec2-s3-access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${BucketName}/web1/index.html
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${BucketName}/web2/index.html

  loadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref SubnetPublicB
        - !Ref SubnetPublicA

  HTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref loadbalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: false
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      Targets:
        - Id: !Ref web1
          Port: 80
        - Id: !Ref web2
          Port: 80

Outputs:
  ALBURL:
    Description: URL for webserver created.
    Value: !Join
      - ''
      - - http://
        - !GetAtt loadbalancer.DNSName

AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Running Wordpress on linux, RDS db, ALB and Certs
Parameters:
  Project:
    Description: Give the project a name
    Type: String
    Default: ZaraJoy-wordpress
  VpcID:
    Description: VPC Id
    Type: AWS::EC2::VPC::Id
  Environment:
    Description: What type of Environment is this?
    Type: String
    AllowedValues:
      - Dev
      - Test
      - Production
      - QA
    Default: Dev
  AppSubnetId:
    Type: AWS::EC2::Subnet::Id
  DBSubnetId1:
    Type: AWS::EC2::Subnet::Id
  DBSubnetId2:
    Type: AWS::EC2::Subnet::Id
  EfsMountPoint:
    Type: String
    Default: /path/to/mount1
  EfsFileSystemId:
    Type: String
    Default: fs-00000000
  InstanceType:
    Type: String
    Default: t3.small
  LatestAmiId:
    Description: AMI for EC2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  DbUser:
    Type: String
    Default: DbUser
  DbPassword:
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    AllowedPattern: '[a-zA-Z0-9!?]*'
    ConstraintDescription: Must only contain upper and lowercase letters, numbers
      and contain a minimum of 8 characters
  DBNAME:
    Type: String
    Default: WPDB
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tags
        Parameters:
          - Project
          - Environment
Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: WordPressKeyPair
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Traffic from Web
      VpcId: !Ref 'VpcID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Traffic to Instance from ALB
      VpcId: !Ref 'VpcID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref 'ALBSecurityGroup'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref 'ALBSecurityGroup'
        - Description: Allow SSH IPv4 IN
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
  EC2SecurityGroupSelfReferenceRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EC2SecurityGroup'
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref 'EC2SecurityGroup'
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic on 3306 from EC2
      VpcId: !Ref 'VpcID'
      SecurityGroupIngress:
        - Description: Allow MySQL IPv4 IN
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref 'EC2SecurityGroup'
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group
      SubnetIds:
        - !Ref 'DBSubnetId1'
        - !Ref 'DBSubnetId2'
  RDS:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      DBName: !Ref DBNAME
      Engine: MySQL
      EngineVersion: 8.0.32
      MasterUserPassword: !Ref DbPassword
      MasterUsername: !Ref DbUser
      StorageType: gp2
      DBSubnetGroupName: !Ref 'RDSSubnetGroup'
      VPCSecurityGroups:
        - !Ref 'RDSSecurityGroup'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'Project'
              - RDS
        - Key: Environment
          Value: !Ref 'Environment'

  WordpressRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
  WordpressInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WordpressRole'
  WordPressIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref 'EC2Instance'
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref 'WordpressInstanceProfile'
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyPair'
      SubnetId: !Ref 'AppSubnetId'
      SecurityGroupIds:
        - !Ref 'EC2SecurityGroup'
      ImageId: !Ref 'LatestAmiId'
      Monitoring: false
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'Project'
              - EC2
        - Key: Environment
          Value: !Ref 'Environment'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install system software - including Web and DB (because we need the CLI tools)
          dnf install wget php-mysqlnd httpd php-fpm php-mysqli mariadb105-server php-json php php-devel -y
          # Start httpd and set to start on system startup
          systemctl enable httpd
          systemctl start httpd
          # Install Wordpress
          wget http://wordpress.org/latest.tar.gz -P /var/www/html
          cd /var/www/html
          tar -zxvf latest.tar.gz
          cp -rvf wordpress/* .
          rm -R wordpress
          rm latest.tar.gz
          # Configure Wordpress
          cp ./wp-config-sample.php ./wp-config.php
          sed -i "s/'database_name_here'/'${DBNAME}'/g" wp-config.php
          sed -i "s/'username_here'/'${DbUser}'/g" wp-config.php
          sed -i "s/'password_here'/'${DbPassword}'/g" wp-config.php
          sed -i "s/'localhost'/'${RDS.Endpoint.Address}'/g" wp-config.php
          #permissions   
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          #CWAgent Install & Config
          dnf install amazon-cloudwatch-agent -y
          mkdir -p /usr/share/collectd/
          touch /usr/share/collectd/types.db
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CWAgentConfig} -s
          #SIGNAL FINISH OF INSTALL & CONFIG
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WordpressEC2 --region ${AWS::Region}
          #  WORDPRESS IP FIX (Adding this after the signal because if we DON'T have a populated DB, it errors)
          cat >> /home/ec2-user/update_wp_ip.sh<< 'EOF'
          #!/bin/bash
          source <(php -r 'require("/var/www/html/wp-config.php"); echo("DB_NAME=".DB_NAME."; DB_USER=".DB_USER."; DB_PASSWORD=".DB_PASSWORD."; DB_HOST=".DB_HOST); ')
          SQL_COMMAND="mysql -u $DB_USER -h $DB_HOST -p$DB_PASSWORD $DB_NAME -e"
          OLD_URL=$(mysql -u $DB_USER -h $DB_HOST -p$DB_PASSWORD $DB_NAME -e 'select option_value from wp_options where option_id = 1;' | grep http)
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          HOST=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4)
          $SQL_COMMAND "UPDATE wp_options SET option_value = replace(option_value, '$OLD_URL', 'http://$HOST') WHERE option_name = 'home' OR option_name = 'siteurl';"
          $SQL_COMMAND "UPDATE wp_posts SET guid = replace(guid, '$OLD_URL','http://$HOST');"
          $SQL_COMMAND "UPDATE wp_posts SET post_content = replace(post_content, '$OLD_URL', 'http://$HOST');"
          $SQL_COMMAND "UPDATE wp_postmeta SET meta_value = replace(meta_value,'$OLD_URL','http://$HOST');"
          EOF

          chmod 755 /home/ec2-user/update_wp_ip.sh
          echo "/home/ec2-user/update_wp_ip.sh" >> /etc/rc.local
          /home/ec2-user/update_wp_ip.sh
  CWAgentConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Type: 'String'
      Value: |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "run_as_user": "root"
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/secure",
                    "log_group_name": "/var/log/secure",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "/var/log/httpd/access_log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "/var/log/httpd/error_log",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "append_dimensions": {
              "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
              "ImageId": "${aws:ImageId}",
              "InstanceId": "${aws:InstanceId}",
              "InstanceType": "${aws:InstanceType}"
            },
            "metrics_collected": {
              "collectd": {
                "metrics_aggregation_interval": 60
              },
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ],
                "totalcpu": false
              },
              "disk": {
                "measurement": [
                  "used_percent",
                  "inodes_free"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "diskio": {
                "measurement": [
                  "io_time",
                  "write_bytes",
                  "read_bytes",
                  "writes",
                  "reads"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "netstat": {
                "measurement": [
                  "tcp_established",
                  "tcp_time_wait"
                ],
                "metrics_collection_interval": 60
              },
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              },
              "swap": {
                "measurement": [
                  "swap_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }          
Outputs:
  WordPressIP:
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'EC2Instance.PublicIp'
  dbhost:
    Description: "RDS Endpoint Address"
    Value: !GetAtt RDS.Endpoint.Address
